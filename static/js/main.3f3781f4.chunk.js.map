{"version":3,"sources":["component/AddTask.js","component/EditTask.js","component/ToDo.js","component/TodoList.js","App.js","reportWebVitals.js","index.js"],"names":["AddTask","modal","toggle","save","useState","ID","Name","Deadline","IsCompleted","formValue","setFormValue","handleChange","e","target","name","value","prevState","Math","floor","random","Modal","isOpen","ModalHeader","ModalBody","classID","type","className","onChange","ModalFooter","Button","color","onClick","taskObj","alert","EditTask","updateTask","event","preventDefault","tempObj","ToDo","index","deleteTask","updateListArray","setModal","colors","primaryColor","secondaryColor","class","style","obj","ToDoList","taskList","setTaskList","useEffect","arr","localStorage","getItem","JSON","parse","tempList","splice","setItem","stringify","window","location","reload","map","push","App","TodoList","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3f3781f4.chunk.js","sourcesContent":["import {Button, Modal, ModalHeader, ModalBody,ModalFooter} from 'reactstrap';\r\nimport React, { useState } from 'react';\r\n\r\nconst AddTask = ({modal, toggle, save}) => {\r\n    const [formValue, setFormValue] = useState({\r\n        ID: 0,\r\n        Name: \"\",\r\n        Deadline: \"\",\r\n        IsCompleted:\"\",\r\n      });\r\n    \r\n      const handleChange = (e) => {\r\n        const { name, value } = e.target;\r\n        setFormValue((prevState) => {\r\n          return {\r\n            ...prevState,\r\n            [name]: value,\r\n          };\r\n        });\r\n      };\r\n      const {ID, Name, Deadline, IsCompleted } = formValue;\r\n      formValue.ID=Math.floor(Math.random() * 100 +1);\r\n      const handleSave = () =>{\r\n        let taskObj={}\r\n          taskObj[\"ID\"] = ID\r\n          taskObj[\"Name\"]= Name\r\n          taskObj[\"IsCompleted\"] = IsCompleted\r\n          taskObj[\"Deadline\"]= Deadline\r\n         \r\n          if (ID!==\"\" && Name!==\"\" && IsCompleted!==\"\" && Deadline!==\"\") {\r\n            save(taskObj)\r\n          }\r\n          else return alert (\"Something is wrong!\")\r\n      }\r\n    return (\r\n        <Modal isOpen={modal} toggle={toggle}>\r\n            <ModalHeader toggle={toggle}>Create Task</ModalHeader>\r\n            <ModalBody>\r\n                    <div classID=\"form-group\">\r\n                        <label>ID</label>\r\n                        <input type=\"number\" className=\"form-control\"  value={ID} onChange= {handleChange} name=\"ID\"/>\r\n                    </div>\r\n                    <div className = \"form-group\">\r\n                        <label>Name</label>\r\n                        <input type=\"text\" className = \"form-control\" value = {Name} onChange = {handleChange} name = \"Name\"/>\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label>Deadline</label>\r\n                        <input type=\"date\" className=\"form-control\"  value={Deadline} onChange= {handleChange} name=\"Deadline\"/>\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label>State</label>\r\n                        <input type=\"text\" className = \"form-control\" value = {IsCompleted} onChange = {handleChange} name = \"IsCompleted\"/>\r\n                    </div>\r\n                \r\n            </ModalBody>\r\n            <ModalFooter>\r\n            <Button color=\"primary\" onClick={handleSave}>Create</Button>{''}\r\n            <Button color=\"secondary\" onClick={toggle}>Cancel</Button>\r\n            </ModalFooter>\r\n      </Modal>\r\n      \r\n\r\n    );\r\n};\r\n\r\nexport default AddTask;","import React, { useState} from 'react';\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\r\n//import AddTask from './AddTask';\r\n\r\nconst EditTask = ({modal, toggle, updateTask, taskObj}) => {\r\n    //const [taskID, setTaskID] = useState('');\r\n    //const [taskName, setTaskName] = useState('');\r\n    //const [taskIsCompleted, setTaskIsCompleted] = useState('');\r\n    //const [taskDeadline, setTaskDeadline] = useState('');\r\n    const [formValue, setFormValue] = useState({\r\n        ID: \"\",\r\n        Name: \"\",\r\n        Deadline: \"\",\r\n        IsCompleted:\"\",\r\n      });\r\n    \r\n      const handleChange = (event) => {\r\n        const { name, value } = event.target;\r\n        setFormValue((prevState) => {\r\n          return {\r\n            ...prevState,\r\n            [name]: value,\r\n          };\r\n        });\r\n      };\r\n    \r\n      const { Name, Deadline, IsCompleted } = formValue;\r\n    /*useEffect(() => {\r\n        setTaskID (ID)\r\n        setTaskName (Name)\r\n        setTaskIsCompleted(IsCompleted)\r\n        setTaskDeadline(Deadline)\r\n    }, []);*/\r\n\r\n    const handleUpdate = (e) => {\r\n        e.preventDefault();\r\n        let tempObj = {}\r\n        tempObj['ID'] = taskObj.ID\r\n        tempObj['Name'] = Name\r\n        tempObj['IsCompleted'] = IsCompleted\r\n        tempObj['Deadline'] = Deadline\r\n        if ((Name!==  taskObj.Name ||IsCompleted !== taskObj.IsCompleted || Deadline!==taskObj.Deadline) && Name!==\"\" && IsCompleted!==\"\" && Deadline!==\"\"){\r\n            updateTask(tempObj)\r\n        }\r\n        else {\r\n            return alert(\"Something is wrong! Please re-type\")\r\n        }  \r\n    }\r\n\r\n    return (\r\n        <Modal isOpen={modal} toggle={toggle}>\r\n            <ModalHeader toggle={toggle}>Update Task</ModalHeader>\r\n            <ModalBody>\r\n                    <div className = \"form-group\">\r\n                        <label>Name</label>\r\n                        <input type=\"text\" className = \"form-control\" value = {Name} onChange = {handleChange} name = \"Name\"/>\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label>Deadline</label>\r\n                        <input type=\"date\" className=\"form-control\"  value={Deadline} onChange= {handleChange} name=\"Deadline\"/>\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label>State</label>\r\n                        <input type=\"text\" className = \"form-control\" value = {IsCompleted} onChange = {handleChange} name = \"IsCompleted\"/>\r\n                \r\n                    </div>\r\n                \r\n            </ModalBody>\r\n            <ModalFooter>\r\n            <Button color=\"primary\" onClick={handleUpdate}>Update</Button>\r\n            <Button color=\"secondary\" onClick={toggle}>Cancel</Button>\r\n            </ModalFooter>\r\n      </Modal>\r\n    );\r\n};\r\n\r\nexport default EditTask;","import React, { useState } from \"react\";\r\nimport EditTask from './EditTask';\r\n//import AddTask from \"./AddTask\";\r\n\r\nconst ToDo= ({ taskObj, index, deleteTask, updateListArray }) => {\r\n    const [modal, setModal] = useState(false);\r\n    const colors = [\r\n        {\r\n            primaryColor : \"#FAC199\",\r\n            secondaryColor : \"#FE9952\"\r\n        },\r\n        {\r\n            primaryColor : \"#9FFAB6\",\r\n            secondaryColor : \"#58E77C\"\r\n        },\r\n        {\r\n            primaryColor : \"#73FEED\",\r\n            secondaryColor : \"#09F8DB\"\r\n        },\r\n        {\r\n            primaryColor : \"#7CEAFB\",\r\n            secondaryColor : \"#15D9F7\"\r\n        },\r\n        {\r\n            primaryColor : \"#8FD6FB\",\r\n            secondaryColor : \"#45BAF8\"\r\n        },\r\n        {\r\n            primaryColor : \"#C1B1F8\",\r\n            secondaryColor : \"#8D6DF6\"\r\n        },\r\n        {\r\n            primaryColor : \"#FB9D9D\",\r\n            secondaryColor : \"#F80909\"\r\n        }\r\n    ]\r\n    const toggle =() =>{\r\n        setModal (!modal);\r\n    }\r\n    const updateTask = (obj) =>{\r\n            updateListArray(obj, index)\r\n        \r\n    }\r\n    const handleDelete = () => {\r\n        deleteTask(index)\r\n    }\r\n\r\n    return(\r\n        <div class = \"card-wrapper mr-5\" >\r\n        <div class = \"card-top\" style={{\"background-color\": colors[index%7].primaryColor}}></div>\r\n        <div class = \"task-holder\">\r\n            <span class = \"card-header\" style={{\"background-color\": colors[index%7].secondaryColor, \"border-radius\": \"10px\"}}>{taskObj.ID}</span>\r\n            <p className = \"mt-3\">Name: {taskObj.Name}</p>\r\n            <p className = \"mt-3\">Deadline: {taskObj.Deadline}</p>\r\n            <p className = \"mt-3\">State: {taskObj.IsCompleted}</p>\r\n\r\n            <div style={{\"position\": \"absolute\", \"right\" : \"20px\", \"bottom\" : \"20px\"}}>\r\n                <i class = \"far fa-edit mr-3\" style={{\"color\" : colors[index%7].secondaryColor, \"cursor\" : \"pointer\"}} onClick = {() => setModal(true)}></i>\r\n                <i class=\"fas fa-trash-alt\" style = {{\"color\" : colors[index%7].secondaryColor, \"cursor\" : \"pointer\"}} onClick = {handleDelete}></i>\r\n            </div>\r\n        </div> \r\n        <EditTask modal = {modal} toggle = {toggle} updateTask = {updateTask} taskObj = {taskObj}/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ToDo;","import React, { useEffect, useState } from \"react\";\r\nimport AddTask from \"./AddTask\";\r\nimport ToDo from \"./ToDo\";\r\n\r\nconst ToDoList = () =>{\r\n    const [modal, setModal]= useState (false);\r\n    const [taskList, setTaskList] = useState ([]);\r\n    useEffect(() => {\r\n        let arr= localStorage.getItem(\"taskList\")\r\n        if (arr) {\r\n            let obj= JSON.parse(arr)\r\n            setTaskList(obj)\r\n        } \r\n    }, [])\r\n\r\n    const deleteTask = (index) => {\r\n        let tempList = taskList\r\n        tempList.splice(index, 1)\r\n        localStorage.setItem(\"taskList\", JSON.stringify(tempList))\r\n        setTaskList(tempList)\r\n        window.location.reload()\r\n    }\r\n\r\n\r\n    const updateListArray = (obj,index) =>{\r\n        let tempList = taskList\r\n        tempList[index] = obj\r\n        localStorage.setItem(\"taskList\",JSON.stringify(tempList))\r\n        setTaskList(tempList)\r\n        window.location.reload()\r\n    }\r\n    const toggle =() =>{\r\n        setModal(!modal);\r\n    }\r\n    const saveTask= (taskObj) =>{\r\n        let tempList = taskList\r\n        tempList.push(taskObj)\r\n        localStorage.setItem(\"taskList\", JSON.stringify(tempList))\r\n        setTaskList(tempList)\r\n        setModal(false)\r\n    }\r\n    return(\r\n        <>\r\n        <div className=\"header text-center\">\r\n            <h1>ToDo List</h1>\r\n            <button className=\"btn btn-primary\" onClick={()=> setModal(true)}  > Add Task</button>\r\n        </div>\r\n        <div className=\"task-container\">\r\n            {taskList && taskList.map((obj, index) => <ToDo taskObj = {obj} index = {index} deleteTask = {deleteTask} updateListArray = {updateListArray}/>)}\r\n\r\n        </div>\r\n        <AddTask toggle={toggle} modal={modal} save ={saveTask}/>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ToDoList;","import './App.css';\nimport React from 'react';\nimport TodoList from './component/TodoList';\nimport 'bootstrap/dist/css/bootstrap.min.css' ;\nimport 'font-awesome/css/font-awesome.min.css'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TodoList />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}